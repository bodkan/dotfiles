export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export TERM=xterm

export EDITOR=vim

export HISTSIZE=10000
export HISTTIMEFORMAT="%h %d %H:%M:%S "
shopt -s histappend
shopt -s cmdhist

export PATH="$HOME/.my_local/bin:$PATH"
PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"

alias ls="ls --color=auto"
alias ll="ls -l"
alias lh="ls -lh"
alias la="ll -a"
alias ts="tmux new-session -A -s default"
alias q="qstat | less -S"
alias qm="qstat -u martin_petr | less -S"
alias h="htop"
alias hm="htop -u krd114"
alias R='R --no-save --no-restore-history --no-save --no-restore-data'
alias mnt='sshfs krd114@r6:/maps/projects/racimolab/people/krd114/ $HOME/Cluster -ovolname=krd114'
alias umnt='umount ~/Cluster'

alias gs="git status"
alias ga="git add"
alias go="git checkout"
alias gc="git commit"
alias gcm="gc -m"
alias gca="gc --amend"
alias gd="git diff"
alias gdc="gd --cached"
alias gb="git branch"
alias gp="git push"
alias gf="git pull"
alias gl="git log --oneline --decorate --graph"
alias gll="git log"

# "smart" viewer function
function v() {
    file="$1"
    shift
    rest="$*"

    if [[ -d $file ]]; then
        ls -l $file
    elif [[ $file =~ ".vcf.gz" ]]; then
        bcftools view $file $rest | less -S
    elif [[ $file =~ ".bcf" ]]; then
        bcftools view $file $rest | less -S
    elif [[ $file =~ ".gz" ]]; then
        zless -S $file | less -S
    elif [[ $file =~ ".bam" ]]; then
        samtools view $file $rest | less -S
    else
        less -S $file
    fi
}

# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=`parse_git_dirty`
        echo " [${BRANCH}${STAT}]"
    else
        echo ""
    fi
}

# get current status of git repo
function parse_git_dirty {
    status=`git status 2>&1 | tee`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

export PS1="\h:\[\e[32m\]\w\[\e[m\]\[\e[31m\]\`parse_git_branch\`\[\e[m\] \n${USER} \\$ "

if [[ "$OSTYPE" == "darwin"* ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    export PATH="/opt/homebrew/opt/qt@5/bin:$PATH"
else
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    export PATH="$HOME/bin:$PATH"
    export DOCKER_HOST=unix:///run/user/243674353/docker.sock
fi

eval "$(pyenv init --path)"

