export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export TERM=xterm

export EDITOR=vim

export HISTSIZE=10000
export HISTTIMEFORMAT="%h %d %H:%M:%S "
shopt -s histappend
shopt -s cmdhist

export PATH="$HOME/.my_local/bin:$PATH"
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/openjdk/bin:$PATH"

if [[ "$OSTYPE" == "darwin"* ]]; then
    export LDFLAGS="-L $(xcrun --show-sdk-path)/usr/lib -L brew --prefix bzip2/lib"
    export CFLAGS="-L $(xcrun --show-sdk-path)/usr/include -L brew --prefix bzip2/include"
fi

# help the linker find libraries (added because of tmux on Willerslev servers)
export LD_LIBRARY_PATH=$HOME/.my_local/lib:$LD_LIBRARY_PATH
export MANPATH=$HOME/.my_local/share/man:$MANPATH

alias rm="rm -v"
alias ls="ls --color=auto"
alias ll="ls -l"
alias lh="ls -lh"
alias la="ll -a"
alias ts="tmux new-session -A -s default"
alias q="qstat | less -S"
alias qm="qstat -u martin_petr | less -S"
alias h="htop"
alias hm="htop -u krd114"
alias R='R --no-save --no-restore-history --no-save --no-restore-data'
alias mnt='sshfs krd114@r6:/maps/projects/racimolab/people/krd114/ $HOME/Cluster -ovolname=krd114'
alias umnt='umount ~/Cluster'

alias gs="git status"
alias ga="git add"
alias go="git checkout"
alias gc="git commit"
alias gcm="gc -m"
alias gca="gc --amend"
alias gd="git diff"
alias gdc="gd --cached"
alias gb="git branch"
alias gp="git push"
alias gf="git pull"
alias gl="git log --oneline --decorate --graph"
alias gll="git log"

# One of several options:
#   - either activate the snakemake environment
#   - run a single snakemake rule using one core
#   - run one or more snakemake rules on a given number of cores
function smk() {
    conda activate snakemake
    if [[ "$#" -eq 1 ]]; then
        snakemake --use-conda --cores 1 $1
    elif [[ "$#" -ge 2 ]]; then
        if [[ $1 =~ ^[1-9]+$ ]] ; then
            num_cores=$1
            shift
        else
            num_cores=1
        fi
        snakemake --use-conda --cores $num_cores $@
    fi
}

# Either activate a given snakemake conda environment X (creating it
# first if necessary based on the contents of rules/envs/X.yaml) or
# list the number of conda environments present on the system.
function smk-env() {
    if [[ -z "$1" ]]; then
        echo "Missing conda environment name"
        echo "=============================="
        conda env list | tail -n+3
        return 1
    fi

    if [[ ! -e "workflow/Snakefile" ]]; then
        echo "Not in a standard Snakemake project directory"
        return 1
    fi

    # compose the name of the Snakemake project conda environment
    dir=`basename $(pwd)`
    name=${dir}-${1}
    # get all environments already created
    envs=$(conda env list | awk '!/^#/ && !/^ / { if (length($1)) print $1 }') 

    # check if the requested conda environment is already present and if not
    # create it now
    if [[ ! $envs =~ $name ]]; then
        conda env create -f workflow/envs/${name}.yaml -n ${name}
    fi
    conda activate $name
    MANPATH=$CONDA_PREFIX/share/man:$MANPATH
}

# Delete a snakemake conda environment.
function smk-rm() {
    if [[ -z "$1" ]]; then
        echo "Missing conda environment name"
        return 1
    fi

    if [[ ! -e "workflow/Snakefile" ]]; then
        echo "Not in a standard Snakemake project directory"
        return 1
    fi

    # compose the name of the Snakemake project conda environment
    dir=`basename $(pwd)`
    name=${dir}-${1}
    # get all environments already created
    envs=$(conda env list | awk '!/^#/ && !/^ / { if (length($1)) print $1 }') 

    # check if the requested conda environment is already present and if not
    # create it now
    if [[ ! $envs =~ $name ]]; then
        echo "Conda environment '${name}' does not exist"
        return 1
    fi
    conda deactivate
    conda env remove -n $name
}

# "smart" viewer function
function v() {
    file="$1"
    shift
    rest="$*"

    if [[ -d $file ]]; then
        ls -l $file
    elif [[ $file =~ ".vcf.gz" ]]; then
        bcftools view $file $rest | less -S
    elif [[ $file =~ ".bcf" ]]; then
        bcftools view $file $rest | less -S
    elif [[ $file =~ ".gz" ]]; then
        zless -S $file | less -S
    elif [[ $file =~ ".bam" ]]; then
        samtools view $file $rest | less -S
    else
        less -S $file
    fi
}

# get current branch in git repo
function parse_git_branch() {
    BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
    if [ ! "${BRANCH}" == "" ]
    then
        STAT=`parse_git_dirty`
        echo " [${BRANCH}${STAT}]"
    else
        echo ""
    fi
}

# get current status of git repo
function parse_git_dirty {
    status=`git status 2>&1 | tee`
    dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
    untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
    ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
    newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
    renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
    deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
    bits=''
    if [ "${renamed}" == "0" ]; then
        bits=">${bits}"
    fi
    if [ "${ahead}" == "0" ]; then
        bits="*${bits}"
    fi
    if [ "${newfile}" == "0" ]; then
        bits="+${bits}"
    fi
    if [ "${untracked}" == "0" ]; then
        bits="?${bits}"
    fi
    if [ "${deleted}" == "0" ]; then
        bits="x${bits}"
    fi
    if [ "${dirty}" == "0" ]; then
        bits="!${bits}"
    fi
    if [ ! "${bits}" == "" ]; then
        echo " ${bits}"
    else
        echo ""
    fi
}

export PS1="\h:\[\e[32m\]\w\[\e[m\]\[\e[31m\]\`parse_git_branch\`\[\e[m\] \n \\$ "

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('$HOME/.my_local/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/.my_local/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/.my_local/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/.my_local/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

