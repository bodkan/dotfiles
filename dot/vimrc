""""""""""""""""""""""""""""""""""""""""""""""""""
" General settings
""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader=" "

set history=500

syntax enable
filetype plugin on
filetype indent on

" auto read when a file is changed from the outside
set autoread
autocmd FocusGained,BufEnter * silent! checktime

" number of lines to the cursor when moving vertically using j/k
set scrolloff=5

set number relativenumber

set wildmenu
set wildmode=longest:list,full
set wildignore=*.o,*~,*.pyc
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

set ruler

set cmdheight=1

set hidden

set backspace=eol,start,indent

set whichwrap+=<,>,h,l

set ignorecase
set smartcase
set incsearch
set hlsearch

" for regular expressions turn magic on
set magic

" show matching brackets when text indicator is over them
set showmatch

" show partial commands as they are typed
set showcmd

" how many tenths of a second to blink when matching brackets
set matchtime=2

" no annoying sound on errors
set noerrorbells

" how long to wait for further keys
set timeoutlen=500

" encoding displayed
set encoding=utf8
" encoding written
set fileencoding=utf-8

" use Unix as the standard file type
set ffs=unix,dos,mac

" always show the status line
set laststatus=2

set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ \ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

set nobackup
set nowritebackup
set noswapfile

set wrap

set mouse=a

set noshowmode

colorscheme quiet

""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom commands and shortcuts
""""""""""""""""""""""""""""""""""""""""""""""""""

" automatically generate tags file for given filetypes
autocmd BufWritePost *.py,*.R silent! !ctags . &

" toggle paste mode on and off (prevent broken indentation etc.)
nnoremap <leader>pp :setlocal paste!<cr>

" :W is a sudo save
command! W execute 'w !sudo tee % > /dev/null' <bar> edit!

nnoremap <leader>n :set number! relativenumber!<cr>

nnoremap <leader>h :set hlsearch!<cr>

" pressing * or # searches for the current visual selection
vnoremap <silent> * :<C-u>call VisualSelection('', '')<cr>/<C-R>=@/<cr><cr>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<cr>?<C-R>=@/<cr><cr>

nnoremap <C-a> 0
nnoremap <C-e> $
inoremap <C-a> <C-o>0
inoremap <C-e> <C-o>$

nnoremap <leader>re :Rexplore<cr>

nnoremap <leader>w :set wrap!<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabs and indentation
""""""""""""""""""""""""""""""""""""""""""""""""""

" use spaces instead of tabs
set expandtab

" pressing TAB respects context
set smarttab

" one TAB is four characters wide for everything...
set shiftwidth=4
set tabstop=4
set softtabstop=4
" ... except R files
autocmd FileType R :setlocal sw=2 ts=2 sts=2 

set autoindent
set smartindent

" break lines at word boundaries
set linebreak

" return to last edit position when opening files
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

""""""""""""""""""""""""""""""""""""""""""""""""""
" Windows, buffers, tabs
""""""""""""""""""""""""""""""""""""""""""""""""""

" quick jump to a buffer
nnoremap <leader>bl :ls<cr>:b<space>

" quick jump to the previous buffer
nnoremap <leader>bb <c-^>

" quick jump to a buffer
nnoremap <leader>bo :browse oldfiles<cr>

" close the current buffer
nnoremap <leader>bx :bdelete<cr>

" moving between buffers
nnoremap ]b :bnext<cr>
nnoremap [b :bprevious<cr>

" managing tabs
nnoremap <leader>te :tabedit<space>
nnoremap <leader>tc :tabnew<cr>
nnoremap <leader>tx :tabclose<cr>

" moving between tabs
nnoremap ]t :tabnext<cr>
nnoremap [t :tabprevious<cr>

" toggle between the current and the last accessed tab
let g:lasttab = 1
nnoremap <leader>tt :exe "tabn ".g:lasttab<cr>
autocmd TabLeave * let g:lasttab = tabpagenr()

" if a buffer is already open in another window/tab, switch to it
set switchbuf=useopen,usetab,newtab
" always show tabline
set showtabline=2

""""""""""""""""""""""""""""""""""""""""""""""""""
" Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""

" Return true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Feed a given string to the command line
function! CmdLine(str)
    call feedkeys(":" . a:str)
endfunction

" Select visually the word under cursor
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", "\\/.*'$^~[]")
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'gv'
        call CmdLine("Ack '" . l:pattern . "' " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""
" LSP config
""""""""""""""""""""""""""""""""""""""""""""""""""

packadd lsp

" R language server
call LspAddServer([#{
	\    name: 'R',
	\    filetype: ['r', 'rmd'],
	\    path: 'R',
	\    args: ['--no-echo', '-e', 'languageserver::run()']
	\  }])

call LspOptionsSet(#{
    \ highlightDiagInline: v:false,
    \ outlineOnRight: v:true,
    \ outlineWinSize: 60
    \ })

nnoremap <leader>cd :LspPeekDefinition<cr>
nnoremap <leader>Cd :LspGotoDefinition<cr>

nnoremap <leader>cr :LspPeekReferences<cr>
nnoremap <leader>Cr :LspShowReferences<cr>

nnoremap <leader>cs :LspDocumentSymbol <cr>
nnoremap <leader>Cs :LspOutline<cr>

nnoremap <leader>ch :LspHover<cr>

nnoremap <leader>cx :LspDiagCurrent<cr>
nnoremap <leader>Cx :LspDiagShow<cr>

nnoremap ]x :LspDiagNext<cr>
nnoremap [x :LspDiagPrev<cr>
nnoremap [X :LspDiagFirst<cr>
nnoremap ]X :LspDiagLast<cr>

